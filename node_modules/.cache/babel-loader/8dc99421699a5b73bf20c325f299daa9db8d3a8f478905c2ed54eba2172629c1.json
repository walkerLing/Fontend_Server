{"ast":null,"code":"export default {\n  name: 'DataTrend',\n  data() {\n    return {\n      chartInstane: null,\n      allData: null,\n      // 从服务器中获取的所有数据\n      showChoice: false,\n      // 是否显示可选项\n      choiceType: 'map',\n      // 显示的数据类型\n      titleFontSize: 0 // 指明标题的字体大小\n    };\n  },\n\n  mounted() {\n    this.initChart();\n    this.getData();\n    window.addEventListener('resize', this.screenAdapter);\n    this.screenAdapter();\n  },\n  destroyed() {\n    window.removeEventListener('resize', this.screenAdapter);\n  },\n  computed: {\n    selectTypes() {\n      if (!this.allData) {\n        return [];\n      } else {\n        return this.allData.type.filter(item => {\n          return item.key !== this.choiceType;\n        });\n      }\n    },\n    showTitle() {\n      if (!this.allData) {\n        return '';\n      } else {\n        return this.allData[this.choiceType].title;\n      }\n    },\n    // 设置给标题的样式\n    comStyle() {\n      return {\n        fontSize: this.titleFontSize + 'px'\n      };\n    },\n    marginStyle() {\n      return {\n        marginLeft: this.titleFontSize + 'px'\n      };\n    }\n  },\n  methods: {\n    initChart() {\n      this.chartInstane = this.$echarts.init(this.$refs.trend_ref, 'chalk');\n      const initOption = {\n        // title:'tubiao',\n        grid: {\n          left: '2%',\n          top: '15%',\n          right: '4%',\n          bottom: '13%',\n          containLabel: true\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        toolbox: {\n          iconStyle: {\n            borderColor: 'black'\n          },\n          right: '5%',\n          feature: {\n            saveAsImage: {},\n            // 将图表保存为图片\n            // dataView: {}, // 是否显示出原始数据\n            // restore: {}, // 还原图表\n            // dataZoom: {}, // 数据缩放\n            magicType: {\n              // 将图表在不同类型之间切换,图表的转换需要数据的支持\n              type: ['bar', 'line']\n            }\n          }\n        },\n        legend: {\n          left: 50,\n          top: '0%',\n          icon: 'circle',\n          textStyle: {\n            color: 'black'\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          axisLabel: {\n            textStyle: {\n              color: 'black'\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              color: 'black'\n            }\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            textStyle: {\n              color: 'black'\n            }\n          }\n        }\n      };\n      this.chartInstane.setOption(initOption);\n    },\n    async getData() {\n      // await this.$http.get()\n      // 对allData进行赋值\n      // const { data: ret } = await this.$http.get('trend')\n      // this.allData = ret\n      this.allData = {\n        \"map\": {\n          \"title\": \"近期温度数据\",\n          \"base\": 310,\n          \"unit\": \"万\",\n          \"data\": [{\n            \"name\": \"大棚内温度\",\n            \"data\": [\"155.13\", \"154.65\", \"171.46\", \"164.38\", \"237.23\", \"300.65\", \"240.29\", \"232.07\", \"193.31\", \"136.70\", \"48.64\", \"90.20\"]\n          }, {\n            \"name\": \"光照\",\n            \"data\": [\"86.25\", \"33.80\", \"145.58\", \"21.79\", \"176.09\", \"132.41\", \"291.05\", \"191.89\", \"151.54\", \"94.25\", \"141.75\", \"157.14\"]\n          }, {\n            \"name\": \"湿度\",\n            \"data\": [\"143.94\", \"186.29\", \"183.64\", \"251.48\", \"195.48\", \"152.16\", \"52.47\", \"184.12\", \"203.79\", \"39.16\", \"56.37\", \"161.64\"]\n          }, {\n            \"name\": \"二氧化碳浓度\",\n            \"data\": [\"57.60\", \"77.61\", \"307.24\", \"165.05\", \"175.41\", \"276.88\", \"269.04\", \"296.11\", \"105.31\", \"283.39\", \"134.08\", \"265.38\"]\n          }, {\n            \"name\": \"室外温度\",\n            \"data\": [\"200.82\", \"215.56\", \"249.80\", \"222.67\", \"216.98\", \"60.12\", \"309.68\", \"273.35\", \"150.99\", \"251.97\", \"26.15\", \"186.99\"]\n          }]\n        },\n        \"common\": {\n          \"month\": [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\"]\n        },\n        \"type\": [{\n          \"key\": \"map\",\n          \"text\": \"地区销量趋势\"\n        }]\n      };\n      // console.log(this.allData)\n      this.updateChart();\n    },\n    updateChart() {\n      // 半透明的颜色值\n      const colorArr1 = ['rgba(11, 168, 44, 0.5)', 'rgba(44, 110, 255, 0.5)', 'rgba(22, 242, 217, 0.5)', 'rgba(254, 33, 30, 0.5)', 'rgba(250, 105, 0, 0.5)'];\n      // 全透明的颜色值\n      const colorArr2 = ['rgba(11, 168, 44, 0)', 'rgba(44, 110, 255, 0)', 'rgba(22, 242, 217, 0)', 'rgba(254, 33, 30, 0)', 'rgba(250, 105, 0, 0)'];\n      // 处理数据\n      // 类目轴的数据\n      const timeArr = this.allData.common.month;\n      // y轴的数据 series下的数据\n      const valueArr = this.allData[this.choiceType].data;\n      const seriesArr = valueArr.map((item, index) => {\n        return {\n          name: item.name,\n          type: 'line',\n          data: item.data,\n          stack: this.choiceType,\n          smooth: true,\n          areaStyle: {\n            // 面积实现颜色渐变\n            color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              //百分之0的状态\n              color: colorArr1[index]\n            },\n            // %0的颜色值\n            {\n              offset: 1,\n              //百分之百的状态\n              color: colorArr2[index]\n            } // 100%的颜色值\n            ])\n          }\n        };\n      });\n      // 图例的数据\n      const legendArr = valueArr.map(item => {\n        return item.name;\n      });\n      const dataOption = {\n        xAxis: {\n          data: timeArr\n        },\n        legend: {\n          data: legendArr\n        },\n        series: seriesArr\n      };\n      this.chartInstane.setOption(dataOption);\n    },\n    screenAdapter() {\n      this.titleFontSize = this.$refs.trend_ref.offsetWidth / 100 * 3.6;\n      const adapterOption = {\n        legend: {\n          itemWidth: this.titleFontSize,\n          itemHeight: this.titleFontSize,\n          itemGap: this.titleFontSize,\n          textStyle: {\n            fontSize: this.titleFontSize / 2\n          }\n        }\n      };\n      this.chartInstane.setOption(adapterOption);\n      this.chartInstane.resize();\n    },\n    handleSelect(currentType) {\n      this.choiceType = currentType;\n      this.updateChart();\n      this.showChoice = false;\n    }\n  }\n};","map":{"version":3,"mappings":"AAOA;EACAA;EACAC;IACA;MACAC;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;IACA;EACA;;EACAC;IACA;IACA;IACAC;IACA;EACA;EACAC;IACAD;EACA;EACAE;IACAC;MACA;QACA;MACA;QACA;UACA;QACA;MACA;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;IACA;IACA;IACAC;MACA;QACAC;MACA;IACA;IACAC;MACA;QACAC;MACA;IACA;EACA;EACAC;IACAC;MACA;MACA;QACA;QACAC;UACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACAC;UACAC;QACA;QACAC;UACAC;YACAC;UACA;UACAP;UACAQ;YACAC;YAAA;YACA;YACA;YACA;YACAC;cAAA;cACAC;YACA;UACA;QAEA;QACAC;UACAd;UACAC;UACAc;UACAC;YACAC;UACA;QACA;QACAC;UACAL;UACAM;UACAC;YACAJ;cACAC;YACA;UACA;UACAI;YACAC;cACAL;YACA;UACA;QACA;QACAM;UACAV;UACAO;YACAJ;cACAC;YACA;UACA;QACA;MAEA;MACA;IACA;IACA;MACA;MACA;MACA;MACA;MACA;QACA;UACA;UACA;UACA;UACA;YACA;YACA;UACA;YACA;YACA;UACA;YACA;YACA;UACA;YACA;YACA;UACA;YACA;YACA;UACA;QACA;QACA;UACA;QACA;QACA;UACA;UACA;QACA;MACA;MACA;MACA;IACA;IACAO;MACA;MACA,mBACA,0BACA,2BACA,2BACA,0BACA,yBACA;MACA;MACA,mBACA,wBACA,yBACA,yBACA,wBACA,uBACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;UACA5C;UACAiC;UACAhC;UACA4C;UACAC;UACAC;YACA;YACAV,6DACA;cACAW;cAAA;cACAX;YACA;YAAA;YACA;cACAW;cAAA;cACAX;YACA;YAAA,CACA;UACA;QACA;MACA;MACA;MACA;QACA;MACA;MACA;QACAC;UACArC;QACA;QACAiC;UACAjC;QAEA;QACAgD;MACA;MACA;IACA;IACAC;MACA;MACA;QACAhB;UACAiB;UACAC;UACAC;UACAjB;YACAtB;UACA;QACA;MACA;MACA;MACA;IACA;IACAwC;MACA;MACA;MACA;IACA;EACA;AACA","names":["name","data","chartInstane","allData","showChoice","choiceType","titleFontSize","mounted","window","destroyed","computed","selectTypes","showTitle","comStyle","fontSize","marginStyle","marginLeft","methods","initChart","grid","left","top","right","bottom","containLabel","tooltip","trigger","toolbox","iconStyle","borderColor","feature","saveAsImage","magicType","type","legend","icon","textStyle","color","xAxis","boundaryGap","axisLabel","axisLine","lineStyle","yAxis","updateChart","stack","smooth","areaStyle","offset","series","screenAdapter","itemWidth","itemHeight","itemGap","handleSelect"],"sourceRoot":"src/components","sources":["DataTrend.vue"],"sourcesContent":["<template>\r\n  <div class=\"com-container\">\r\n    <div class=\"com-chart\" ref=\"trend_ref\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name:'DataTrend',\r\n  data () {\r\n    return {\r\n      chartInstane: null,\r\n      allData: null, // 从服务器中获取的所有数据\r\n      showChoice: false, // 是否显示可选项\r\n      choiceType: 'map', // 显示的数据类型\r\n      titleFontSize: 0 // 指明标题的字体大小\r\n    }\r\n  },\r\n  mounted () {\r\n    this.initChart()\r\n    this.getData()\r\n    window.addEventListener('resize', this.screenAdapter)\r\n    this.screenAdapter()\r\n  },\r\n  destroyed () {\r\n    window.removeEventListener('resize', this.screenAdapter)\r\n  },\r\n  computed: {\r\n    selectTypes () {\r\n      if (!this.allData) {\r\n        return []\r\n      } else {\r\n        return this.allData.type.filter(item => {\r\n          return item.key !== this.choiceType\r\n        })\r\n      }\r\n    },\r\n    showTitle () {\r\n      if (!this.allData) {\r\n        return ''\r\n      } else {\r\n        return this.allData[this.choiceType].title\r\n      }\r\n    },\r\n    // 设置给标题的样式\r\n    comStyle () {\r\n      return {\r\n        fontSize: this.titleFontSize + 'px'\r\n      }\r\n    },\r\n    marginStyle () {\r\n      return {\r\n        marginLeft: this.titleFontSize + 'px'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    initChart () {\r\n      this.chartInstane = this.$echarts.init(this.$refs.trend_ref, 'chalk')\r\n      const initOption = {\r\n        // title:'tubiao',\r\n        grid: {\r\n          left: '2%',\r\n          top: '15%',\r\n          right: '4%',\r\n          bottom: '13%',\r\n          containLabel: true\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        toolbox: {\r\n          iconStyle:{\r\n            borderColor:'black'\r\n          },\r\n          right:'5%',\r\n          feature: {\r\n          saveAsImage: {}, // 将图表保存为图片\r\n          // dataView: {}, // 是否显示出原始数据\r\n          // restore: {}, // 还原图表\r\n          // dataZoom: {}, // 数据缩放\r\n          magicType: { // 将图表在不同类型之间切换,图表的转换需要数据的支持\r\n          type: ['bar', 'line']\r\n            },\r\n          },\r\n    \r\n        },\r\n        legend: {\r\n          left: 50,\r\n          top: '0%',\r\n          icon: 'circle',\r\n          textStyle:{\r\n              color:'black'\r\n            }\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          axisLabel:{\r\n            textStyle:{\r\n              color:'black'\r\n            },\r\n          },\r\n          axisLine:{\r\n            lineStyle:{\r\n              color:'black'\r\n            }\r\n          },\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          axisLabel:{\r\n            textStyle:{\r\n              color:'black'\r\n            }\r\n          },\r\n        }\r\n\r\n      }\r\n      this.chartInstane.setOption(initOption)\r\n    },\r\n    async getData () {\r\n      // await this.$http.get()\r\n      // 对allData进行赋值\r\n      // const { data: ret } = await this.$http.get('trend')\r\n      // this.allData = ret\r\n      this.allData = {\r\n              \"map\": {\r\n                  \"title\": \"近期温度数据\",\r\n                  \"base\": 310,\r\n                  \"unit\": \"万\",\r\n                  \"data\": [{\r\n                      \"name\": \"大棚内温度\",\r\n                      \"data\": [\"155.13\",\"154.65\",\"171.46\",\"164.38\",\"237.23\",\"300.65\",\"240.29\",\"232.07\",\"193.31\",\"136.70\",\"48.64\",\"90.20\"]\r\n                  }, {\r\n                      \"name\": \"光照\",\r\n                      \"data\": [\"86.25\",\"33.80\",\"145.58\",\"21.79\",\"176.09\",\"132.41\",\"291.05\",\"191.89\",\"151.54\",\"94.25\",\"141.75\",\"157.14\"]\r\n                  }, {\r\n                      \"name\": \"湿度\",\r\n                      \"data\": [\"143.94\",\"186.29\",\"183.64\",\"251.48\",\"195.48\",\"152.16\",\"52.47\",\"184.12\",\"203.79\",\"39.16\",\"56.37\",\"161.64\"]\r\n                  }, {\r\n                      \"name\": \"二氧化碳浓度\",\r\n                      \"data\": [\"57.60\",\"77.61\",\"307.24\",\"165.05\",\"175.41\",\"276.88\",\"269.04\",\"296.11\",\"105.31\",\"283.39\",\"134.08\",\"265.38\"]\r\n                  }, {\r\n                      \"name\": \"室外温度\",\r\n                      \"data\": [\"200.82\",\"215.56\",\"249.80\",\"222.67\",\"216.98\",\"60.12\",\"309.68\",\"273.35\",\"150.99\",\"251.97\",\"26.15\",\"186.99\"]\r\n                  }]\r\n              },\r\n              \"common\": {\r\n                  \"month\": [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\"]\r\n              },\r\n              \"type\": [{\r\n                  \"key\": \"map\",\r\n                  \"text\": \"地区销量趋势\"\r\n              }]\r\n          }\r\n      // console.log(this.allData)\r\n      this.updateChart()\r\n    },\r\n    updateChart () {\r\n      // 半透明的颜色值\r\n      const colorArr1 = [\r\n        'rgba(11, 168, 44, 0.5)',\r\n        'rgba(44, 110, 255, 0.5)',\r\n        'rgba(22, 242, 217, 0.5)',\r\n        'rgba(254, 33, 30, 0.5)',\r\n        'rgba(250, 105, 0, 0.5)'\r\n      ]\r\n      // 全透明的颜色值\r\n      const colorArr2 = [\r\n        'rgba(11, 168, 44, 0)',\r\n        'rgba(44, 110, 255, 0)',\r\n        'rgba(22, 242, 217, 0)',\r\n        'rgba(254, 33, 30, 0)',\r\n        'rgba(250, 105, 0, 0)'\r\n      ]\r\n      // 处理数据\r\n      // 类目轴的数据\r\n      const timeArr = this.allData.common.month\r\n      // y轴的数据 series下的数据\r\n      const valueArr = this.allData[this.choiceType].data\r\n      const seriesArr = valueArr.map((item, index) => {\r\n        return {\r\n          name: item.name,\r\n          type: 'line',\r\n          data: item.data,\r\n          stack: this.choiceType,\r\n          smooth:true,\r\n          areaStyle: {\r\n            // 面积实现颜色渐变\r\n            color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n              {\r\n                offset: 0,//百分之0的状态\r\n                color: colorArr1[index]\r\n              }, // %0的颜色值\r\n              {\r\n                offset: 1,//百分之百的状态\r\n                color: colorArr2[index]\r\n              } // 100%的颜色值\r\n            ])\r\n          }\r\n        }\r\n      })\r\n      // 图例的数据\r\n      const legendArr = valueArr.map(item => {\r\n        return item.name\r\n      })\r\n      const dataOption = {\r\n        xAxis: {\r\n          data: timeArr\r\n        },\r\n        legend: {\r\n          data: legendArr\r\n          \r\n        },\r\n        series: seriesArr\r\n      }\r\n      this.chartInstane.setOption(dataOption)\r\n    },\r\n    screenAdapter () {\r\n      this.titleFontSize = this.$refs.trend_ref.offsetWidth / 100 * 3.6\r\n      const adapterOption = {\r\n        legend: {\r\n          itemWidth: this.titleFontSize,\r\n          itemHeight: this.titleFontSize,\r\n          itemGap: this.titleFontSize,\r\n          textStyle: {\r\n            fontSize: this.titleFontSize / 2\r\n          }\r\n        }\r\n      }\r\n      this.chartInstane.setOption(adapterOption)\r\n      this.chartInstane.resize()\r\n    },\r\n    handleSelect (currentType) {\r\n      this.choiceType = currentType\r\n      this.updateChart()\r\n      this.showChoice = false\r\n    }\r\n  }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}