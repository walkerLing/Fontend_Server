{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'BlockStorage',\n  data() {\n    return {\n      fileList1: [],\n      fileList2: [],\n      FormData: {\n        uuid: \"\",\n        certOfOrigin: \"\",\n        storehouse: \"\",\n        plantDevelopmentReq: {\n          temperature: \"\",\n          humidity: \"\",\n          beam: \"\",\n          images: []\n        }\n      }\n    };\n  },\n  methods: {\n    // 选择文件、移除文件、上传文件成功/失败后，都会触发\n    fileChange(file, fileList) {\n      this.fileList = fileList;\n    },\n    // 移除文件时触发\n    removeFile(file, fileList) {\n      this.fileList = fileList;\n    },\n    // 选择的文件超出限制的文件总数量时触发\n    limitCheck1() {\n      this.$message.warning('每次只能上传一个文件');\n    },\n    // 点击上传按钮\n    submitUpload() {\n      // 将文件上传到服务器，先触发beforeUpload事件，对上传的文件进行校验，校验通过后才会上传\n      this.$refs.upload.submit();\n    },\n    // 文件上传前的校验 —— 常见的校验有：校验文件类型，文件大小\n    beforeUpload(file) {\n      // 允许上传的文件格式列表\n      let acceptList = [\"jpg\", \"png\"];\n      // 根据文件名获取文件的后缀名\n      let fileType = file.name.split('.').pop().toLowerCase();\n      // 判断文件格式是否符合要求\n      if (acceptList.indexOf(fileType) === -1) {\n        this.$message.error('只能上传 jpg/png 格式的文件 !');\n        return false;\n      }\n      // 判断文件大小是否符合要求\n      if (file.size / 1024 / 1024 > 1) {\n        this.$message.error('上传文件大小不能超过 1M !');\n        return false;\n      }\n    },\n    submitForm(FormData) {\n      this.$refs[FormData].validate(valid => {\n        if (valid) {\n          // alert('submit!');\n          console.log(JSON.stringify(this.FormData));\n          this.onSubmit();\n        } else {\n          // console.log('error submit!!');\n          this.notice12();\n          return false;\n        }\n      });\n    },\n    resetForm(FormData) {\n      this.$refs[FormData].resetFields();\n      this.notice13();\n    },\n    notice11() {\n      this.$notify({\n        title: \"数据上传成功\",\n        message: \"所填数据将上传到区块链\",\n        duration: 0,\n        type: \"success\"\n      });\n    },\n    notice13() {\n      this.$notify11({\n        title: \"数据重置成功\",\n        message: \"所填数据已进行重置\",\n        duration: 0,\n        type: \"success\"\n      });\n    },\n    notice12() {\n      this.$notify({\n        title: \"数据上传失败\",\n        message: \"请检查数据类型或网络环境，稍后再次上传\",\n        duration: 0,\n        type: \"fail\"\n      });\n    },\n    onSubmit() {\n      this.$axios.post(\"http://fruit.mingbyte.com:55001/gateway/fruit/invokeChaincode\", JSON.stringify(this.FormData)).then(res => {\n        console.log(\"请求发送成功\", res);\n        this.notice11();\n      }).catch(error => {\n        console.log(\"请求发送失败\", error);\n        this.notice12();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AA8DA;AACA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;UACAC;UACAC;UACAC;UACAC;QACA;MACA;IACA;EACA;EACAC;IACA;IACAC;MACA;IACA;IACA;IACAC;MACA;IACA;IACA;IACAC;MACA;IACA;IACA;IACAC;MACA;MACA;IAEA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;QACA;QACA;MACA;MACA;MACA;QACA;QACA;MACA;IACA;IAKAC;MACA;QACA;UACA;UACAC;UACA;QACA;UACA;UACA;UACA;QACA;MACA;IACA;IACAC;MACA;MACA;IACA;IAKAC;MACA;QACAC;QACAC;QACAC;QACAC;MACA;IACA;IACAC;MACA;QACAJ;QACAC;QACAC;QACAC;MACA;IACA;IACAE;MACA;QACAL;QACAC;QACAC;QACAC;MACA;IACA;IAKAG;MACA,iHACAC;QACAV;QACA;MACA,GACAW;QACAX;QACA;MACA;IACA;EAEA;AACA","names":["name","data","fileList1","fileList2","FormData","uuid","certOfOrigin","storehouse","plantDevelopmentReq","temperature","humidity","beam","images","methods","fileChange","removeFile","limitCheck1","submitUpload","beforeUpload","submitForm","console","resetForm","notice11","title","message","duration","type","notice13","notice12","onSubmit","then","catch"],"sourceRoot":"src/components","sources":["BlockStorage.vue"],"sourcesContent":["<template>\r\n  <!-- 区块链溯源相关信息可视化展示区域 -->\r\n  <div class=\"visualizationOfBlock\">\r\n    <div id=\"info_patient\" style=\"padding-left:7%\">\r\n      <!-- 卡片放置表格 -->\r\n      <el-card style=\"border-radius: 30px;width:877px;text-align:center;background-color:transparent;\">\r\n\r\n        <div slot=\"header\" class=\"clearfix\">\r\n          <span id=\"fonts\" style=\"color: white;\">存储信息表单如下</span>\r\n        </div>\r\n\r\n        <el-upload ref=\"upload\" accept=\".jpg,.png\" :limit=\"1\" :on-exceed='limitCheck1' :file-list=\"fileList1\"\r\n          :on-remove=\"removeFile\" :on-change=\"fileChange\" :auto-upload=\"false\" :before-upload=\"beforeUpload\"\r\n          action=\"https://jsonplaceholder.typicode.com/posts/\"\r\n          style=\"margin-bottom:5%;margin-top:5%;padding:5%;\">\r\n          <el-button slot=\"trigger\" size=\"large\" type=\"primary\">选取一张产地证书图片</el-button>\r\n          <el-button :disabled=\"fileList.length < 1\" style=\"margin-left: 10px;\" size=\"large\" type=\"success\"\r\n            @click=\"submitUpload\">上传到服务器\r\n          </el-button>\r\n          <div slot=\"tip\" class=\"el-upload__tip\">只能上传 jpg/png 文件，且不超过1M</div>\r\n        </el-upload>\r\n\r\n\r\n        <el-form :model=\"FormData\" ref=\"FormData\" label-position=\"left\" label-width=\"80px\">\r\n\r\n          <el-form-item label=\"溯源码\" prop=\"uuid\" :rules=\"[\r\n            { required: true, message: '溯源码不能为空' },\r\n          ]\">\r\n            <el-input v-model=\"FormData.uuid\" autocomplete=\"off\" placeholder=\"请输入溯源码\"></el-input>\r\n\r\n          </el-form-item>\r\n\r\n          <el-form-item label=\"仓库名称\">\r\n            <el-input v-model=\"FormData.storehouse\" placeholder=\"请输入仓库名称\"></el-input>\r\n          </el-form-item>\r\n\r\n          <el-form-item label=\"温度\">\r\n            <el-input v-model=\"FormData.plantDevelopmentReq.temperature\" placeholder=\"请输入温度\"></el-input>\r\n          </el-form-item>\r\n\r\n          <el-form-item label=\"湿度\">\r\n            <el-input v-model=\"FormData.plantDevelopmentReq.humidity\" placeholder=\"请输入湿度\"></el-input>\r\n          </el-form-item>\r\n\r\n          <el-form-item label=\"光照强度\">\r\n            <el-input v-model=\"FormData.plantDevelopmentReq.beam\" placeholder=\"请输入光照强度\"></el-input>\r\n          </el-form-item>\r\n\r\n          <el-form-item size=\"large\">\r\n            <el-button type=\"primary\" @click=\"submitForm('FormData')\">提交数据</el-button>\r\n            <el-button @click=\"resetForm('FormData')\">重置表单</el-button>\r\n          </el-form-item>\r\n\r\n\r\n\r\n        </el-form>\r\n      </el-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nexport default {\r\n  name: 'BlockStorage',\r\n  data() {\r\n    return {\r\n      fileList1: [],\r\n      fileList2:[],\r\n      FormData: {\r\n        uuid: \"\",\r\n        certOfOrigin: \"\",\r\n        storehouse: \"\",\r\n        plantDevelopmentReq: {\r\n          temperature: \"\",\r\n          humidity: \"\",\r\n          beam: \"\",\r\n          images: [],\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    // 选择文件、移除文件、上传文件成功/失败后，都会触发\r\n    fileChange(file, fileList) {\r\n      this.fileList = fileList\r\n    },\r\n    // 移除文件时触发\r\n    removeFile(file, fileList) {\r\n      this.fileList = fileList\r\n    },\r\n    // 选择的文件超出限制的文件总数量时触发\r\n    limitCheck1() {\r\n      this.$message.warning('每次只能上传一个文件')\r\n    },\r\n    // 点击上传按钮\r\n    submitUpload() {\r\n      // 将文件上传到服务器，先触发beforeUpload事件，对上传的文件进行校验，校验通过后才会上传\r\n      this.$refs.upload.submit();\r\n\r\n    },\r\n    // 文件上传前的校验 —— 常见的校验有：校验文件类型，文件大小\r\n    beforeUpload(file) {\r\n      // 允许上传的文件格式列表\r\n      let acceptList = [\"jpg\", \"png\"]\r\n      // 根据文件名获取文件的后缀名\r\n      let fileType = file.name.split('.').pop().toLowerCase()\r\n      // 判断文件格式是否符合要求\r\n      if (acceptList.indexOf(fileType) === -1) {\r\n        this.$message.error('只能上传 jpg/png 格式的文件 !');\r\n        return false\r\n      }\r\n      // 判断文件大小是否符合要求\r\n      if (file.size / 1024 / 1024 > 1) {\r\n        this.$message.error('上传文件大小不能超过 1M !');\r\n        return false\r\n      }\r\n    },\r\n\r\n\r\n\r\n\r\n    submitForm(FormData) {\r\n      this.$refs[FormData].validate((valid) => {\r\n        if (valid) {\r\n          // alert('submit!');\r\n          console.log(JSON.stringify(this.FormData))\r\n          this.onSubmit();\r\n        } else {\r\n          // console.log('error submit!!');\r\n          this.notice12();\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    resetForm(FormData) {\r\n      this.$refs[FormData].resetFields();\r\n      this.notice13();\r\n    },\r\n\r\n\r\n\r\n\r\n    notice11() {\r\n      this.$notify({\r\n        title: \"数据上传成功\",\r\n        message: \"所填数据将上传到区块链\",\r\n        duration: 0,\r\n        type: \"success\",\r\n      })\r\n    },\r\n    notice13() {\r\n      this.$notify11({\r\n        title: \"数据重置成功\",\r\n        message: \"所填数据已进行重置\",\r\n        duration: 0,\r\n        type: \"success\",\r\n      })\r\n    },\r\n    notice12() {\r\n      this.$notify({\r\n        title: \"数据上传失败\",\r\n        message: \"请检查数据类型或网络环境，稍后再次上传\",\r\n        duration: 0,\r\n        type: \"fail\",\r\n      })\r\n    },\r\n\r\n\r\n\r\n\r\n    onSubmit() {\r\n      this.$axios.post(\"http://fruit.mingbyte.com:55001/gateway/fruit/invokeChaincode\", JSON.stringify(this.FormData))\r\n        .then(res => {\r\n          console.log(\"请求发送成功\", res)\r\n          this.notice11()\r\n        })\r\n        .catch(error => {\r\n          console.log(\"请求发送失败\", error)\r\n          this.notice12()\r\n        })\r\n    }\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n<style scoped>\r\n.el-input {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n#el-divider {\r\n  height: 10px;\r\n}\r\n.el-upload__input {\r\n\r\n  display: none;\r\n \r\n }\r\n</style>\r\n<style>\r\n    .el-upload input{\r\n        display: none !important;;\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}